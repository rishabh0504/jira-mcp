# Jira Integration System

This system provides a natural language interface to interact with Jira. It can intelligently determine whether to fetch tickets from a Jira project or create new tickets based on the user's request.

## Setup

1. Ensure your environment variables are set:

   ```
   JIRA_BASE_URL=https://your-domain.atlassian.net
   JIRA_EMAIL=your-email@example.com
   JIRA_API_TOKEN=your-api-token
   OLLAMA_HOST=http://localhost:11434
   ```

2. Start your server and the Jira integration will be available at the `/jira/interact` endpoint.

## Usage Examples

### Fetching Tickets

Send a POST request to `/jira/interact` with a query that includes the project key:

```bash
curl --location 'http://localhost:3000/jira/interact' \
--header 'Content-Type: application/json' \
--data '{
  "query": "Fetch all tickets from the ENBDX project"
}'
```

```bash
curl --location 'http://localhost:3000/jira/interact' \
--header 'Content-Type: application/json' \
--data '{
  "query": "Show me the issues in PROJ"
}'
```

### Creating Tickets

Send a POST request to `/jira/interact` with a query that includes the ticket details:

```bash
curl --location 'http://localhost:3000/jira/interact' \
--header 'Content-Type: application/json' \
--data '{
  "query": "Create a new ticket in ENBDX with title: API Integration Issue, description: The API returns 500 errors when accessing user data"
}'
```

```bash
curl --location 'http://localhost:3000/jira/interact' \
--header 'Content-Type: application/json' \
--data '{
  "query": "Add a bug in PROJ about login failures with description: Users cannot log in with SSO"
}'
```

## How It Works

1. The system analyzes the natural language query to determine if it's a fetch or create operation
2. For fetch operations, it extracts the project key and fetches tickets
3. For create operations, it extracts the project, title, description, and other details
4. If the query is ambiguous or complex, it falls back to using an LLM agent to process the request

## Response Format

Successful responses:

```json
{
  "success": true,
  "data": {
    // Ticket data or operation result
  }
}
```

Error responses:

```json
{
  "success": false,
  "error": "Error message"
}
```

## Jira: My Profile

```
curl --location 'http://localhost:8080/rest/api/2/myself' \
--header 'Content-Type: application/json' \
--header 'Authorization: Basic YWRtaW46YWRtaW4=' \
--header 'Cookie: JSESSIONID=203D7D1B82D3FCF6CAF6D94C69DA030B; atlassian.xsrf.token=B6J2-XRSH-5VFG-CVYS_49aa123dd24dac1cbf530d702008db9831b61e7c_lin'
```

## Jira fetch all tickets

```
curl --location 'http://localhost:3000/jira/interact' \
--header 'Content-Type: application/json' \
--header 'Cookie: JSESSIONID=203D7D1B82D3FCF6CAF6D94C69DA030B; atlassian.xsrf.token=B6J2-XRSH-5VFG-CVYS_49aa123dd24dac1cbf530d702008db9831b61e7c_lin' \
--data '{
"query": "extract all tickets from the AICCODEGEN project"
}'
```

## Jira: Create Ticket

```
curl --location 'http://localhost:3000/jira/interact' \
--header 'Content-Type: application/json' \
--header 'Cookie: JSESSIONID=203D7D1B82D3FCF6CAF6D94C69DA030B; atlassian.xsrf.token=B6J2-XRSH-5VFG-CVYS_49aa123dd24dac1cbf530d702008db9831b61e7c_lin' \
--data '{
"query": "Create a new story in AICCODEGEN with title: API Integration Issue, description: The API returns 500 errors when accessing user data"
}'
```

## Jira: Create Ticket Epic

```
curl --location 'http://localhost:3000/jira/interact' \
--header 'Content-Type: application/json' \
--header 'Cookie: JSESSIONID=203D7D1B82D3FCF6CAF6D94C69DA030B; atlassian.xsrf.token=B6J2-XRSH-5VFG-CVYS_49aa123dd24dac1cbf530d702008db9831b61e7c_lin' \
--data '{
  "query": "Create an Epic in AICCODEGEN with title: API Integration Issue, description: The API returns 500 errors when accessing user data"
}'
```

PORT=3000
APP_NAME=TypeDI App
OLLAMA_HOST=http://127.0.0.1:11434

JIRA_BASE_URL=http://localhost:8080
JIRA_EMAIL=rishabh.tiwari0504@gmail.com
JIRA_API_TOKEN=OTM2NTgwNDYyODE5OjoN0Mm5aPtXqZDNMd86Jw0iOggx

JIRA_USER=admin
JIRA_PASSWORD=admin

JIRA_MCP_TOEKN=OTM2NTgwNDYyODE5OjoN0Mm5aPtXqZDNMd86Jw0iOggx
PROJECT_KEY=AICCODEGEN


## Jira: Bulk Create Ticket

```
curl --location 'http://localhost:3000/jira/interact' \
--header 'Content-Type: application/json' \
--header 'Cookie: JSESSIONID=203D7D1B82D3FCF6CAF6D94C69DA030B; atlassian.xsrf.token=B6J2-XRSH-5VFG-CVYS_49aa123dd24dac1cbf530d702008db9831b61e7c_lin' \
--data '{
  "query": "Create the following Jira tickets in project AICCODEGEN:\n1. Epic - Title: Backend Refactor, Description: Cleanup and refactor legacy authentication code\n2. Story - Title: Update API Docs, Description: Add missing endpoints to the developer portal\n3. Story - Title: Optimize DB Queries, Description: Improve performance of user data fetching\n4. Epic - Title: Frontend Redesign, Description: Implement new UI for dashboard"
}
'
```


## Jira: Bulk Create Ticket from brd and sync with jira
curl --location 'http://localhost:3000/jira/sync-with-jira' \
--header 'Content-Type: application/json' \
--header 'Cookie: JSESSIONID=203D7D1B82D3FCF6CAF6D94C69DA030B; atlassian.xsrf.token=B6J2-XRSH-5VFG-CVYS_49aa123dd24dac1cbf530d702008db9831b61e7c_lin' \
--data '{
  "query": "Create the following Jira tickets in project AICCODEGEN:\n1. Epic - Title: Backend Refactor, Description: Cleanup and refactor legacy authentication and session management code\n2. Story - Title: Modularize login/logout flows, Description: Rewrite the login and logout handlers to follow a reusable, modular structure\n3. Story - Title: Replace deprecated token utility, Description: Remove use of the deprecated token-utils package and replace with custom secure JWT utility\n4. Story - Title: Add test coverage to auth module, Description: Implement Jest-based unit and integration tests to achieve 90%+ test coverage\n5. Epic - Title: Frontend Redesign, Description: Redesign the dashboard and settings UI for improved usability\n6. Story - Title: Implement new dashboard layout, Description: Develop the redesigned widget-based layout using Tailwind CSS\n7. Story - Title: Add dark mode support, Description: Enable light/dark themes with toggle and system preference detection\n8. Story - Title: Improve accessibility, Description: Ensure all components are navigable by keyboard and screen-reader friendly\n9. Epic - Title: Developer Experience Enhancements, Description: Improve developer portal documentation and onboarding\n10. Story - Title: Update API reference documentation, Description: Ensure all current endpoints are documented, with examples\n11. Story - Title: Create onboarding tutorial, Description: Design a beginner-friendly onboarding guide for new developers\n12. Story - Title: Add interactive API playground, Description: Implement a sandbox where devs can try API calls directly"
}
'
